// Main.cpp (PS4)
// Copyright (C) 2010 Audiokinetic Inc
/// \file
/// Contains the entry point for the application.


#include "stdafx.h"
#include "IntegrationDemo.h"
#include "Platform.h"
#include "Helpers.h"

#include "SampleApplication.h"

#include <audioout.h>

#include "Menu.h"
#include "Page.h"
#include <AK/SoundEngine/Common/AkSoundEngine.h>    // Sound engine
#include "../WwiseProject/GeneratedSoundBanks/Wwise_IDs.h"		// IDs generated by Wwise
#include "IntegrationDemo.h"
#include "DemoLocalization.h"

#ifdef AK_ENABLE_INSTRUMENT
	#pragma comment( lib, "ScePerf_stub_weak" )
#endif

const int AK_DEFAULT_DISPLAY_WIDTH = 1280;
const int AK_DEFAULT_DISPLAY_HEIGHT = 720;

/* Main thread parameters */
extern const char			sceUserMainThreadName[]		= "IntegrationDemo";
//extern const int			sceUserMainThreadPriority	= SCE_KERNEL_DEFAULT_PRIORITY_USER;
//extern const unsigned int	sceUserMainThreadStackSize	= SCE_KERNEL_STACK_SIZE_DEFAULT_USER_MAIN;

#include <stdlib.h>
size_t	sceLibcHeapSize = 256*1024*1024;

const AkOSChar* g_szIntegrationDemoBanksPath = AKTEXT( "/app0/" ); // May change to "sd0:" during init // hostapp // app0:

/////////////////////////////////////////////////////////////////////////////////
//                              MEMORY HOOKS SETUP
//
//                             ##### IMPORTANT #####
//
// These custom alloc/free functions are declared as "extern" in AkMemoryMgr.h
// and MUST be defined by the game developer.
/////////////////////////////////////////////////////////////////////////////////

namespace AK
{
	void * AllocHook( size_t in_size )
    {
        return malloc( in_size );
    }
    void FreeHook( void * in_ptr )
    {
        free( in_ptr );
    }
}

int InitThreading()
{
	return 0;
}
void TermThreading()
{
}

/*E Buffers for FIOS2 initialization */
int64_t g_OpStorage[4*1024];    /* 32KiB */
int64_t g_ChunkStorage[8*1024]; /* 64KiB */
int64_t g_FHStorage[2*1024];    /* 16KiB */
int64_t g_DHStorage[512];       /* 4KiB */

PS4SampleApplication g_application;

int InitIO()
{
	SceFiosParams params = SCE_FIOS_PARAMS_INITIALIZER;

	/*E Provide required storage buffers. */
	params.opStorage.pPtr = g_OpStorage;
	params.opStorage.length = sizeof(g_OpStorage);
	params.chunkStorage.pPtr = g_ChunkStorage;
	params.chunkStorage.length = sizeof(g_ChunkStorage);
	params.fhStorage.pPtr = g_FHStorage;
	params.fhStorage.length = sizeof(g_FHStorage);
	params.dhStorage.pPtr = g_DHStorage;
	params.dhStorage.length = sizeof(g_DHStorage);

	/*E Enable extra profiling. */
	/* params.profiling = (uint32_t)(SCE_FIOS_PROFILE_API | SCE_FIOS_PROFILE_OP); */
	/* params.profiling = (uint32_t)(SCE_FIOS_PROFILE_ALL); */

	return sceFiosInitialize(&params);
}

void TermIO()
{
	/*E Terminate FIOS2. */
	sceFiosTerminate();
}

void CustomAssertHook(const char * in_pszExpression,	///< Expression
										const char * in_pszFileName,	///< File Name
										int in_lineNumber				///< Line Number
										)
{
	char msg[256];
	sprintf( msg, "------------------------------------------------------\nASSERT DETECTED\n%s\n%s\t%i\n------------------------------------------------------\n",
		in_pszExpression, in_pszFileName, in_lineNumber );
	AKPLATFORM::OutputDebugMsg( msg );

	return;
}

///////////////////////////////////////
//  Main - Application's entry point
///////////////////////////////////////
int main()
{
	InitIO();

	// Test the existence of an Integration Demo-specific bank to decide if
	// we use the SD card or the Host's file system.
	/*if ( sceFiosExistsSync( NULL, "sd0:car.bnk" ) )
		g_szIntegrationDemoBanksPath = AKTEXT( "sd0:" );*/
	// balary todo

	printf( "IntegrationDemo will load banks from %s\n", g_szIntegrationDemoBanksPath );

	// Initialize the Integration Demo
	AkMemSettings memSettings;
	AkStreamMgrSettings stmSettings;
	AkDeviceSettings deviceSettings;
	AkInitSettings initSettings;
	AkPlatformInitSettings platformInitSettings;
	AkMusicSettings musicInit;
	IntegrationDemo::Instance().GetDefaultSettings(memSettings, stmSettings, deviceSettings, initSettings, platformInitSettings, musicInit);
	platformInitSettings.threadLEngine.dwAffinityMask = 1 << 5;
	platformInitSettings.threadLEngine.nPriority = AK_THREAD_PRIORITY_ABOVE_NORMAL;
	initSettings.pfnAssertHook = CustomAssertHook;

	AkOSChar szError[500];
	if ( !IntegrationDemo::Instance().Init( memSettings, stmSettings, deviceSettings, initSettings, platformInitSettings, musicInit, NULL, szError, IntegrationDemoHelpers::AK_ARRAYSIZE(szError), AK_DEFAULT_DISPLAY_WIDTH, AK_DEFAULT_DISPLAY_HEIGHT ) )
	{
		printf( "ERROR: Failed to initialize the Integration Demo: %s", szError );
		return 1;
	}

	/*if ( AK::ATRAC9::Init() != AK_Success )
	{
		printf( "ERROR: AK::ATRAC9::Init() failed -- Execution will continue, but ATRAC9 decoding will not be available.\n" );
	}*/

	g_application.initialize();

	// Game Loop
	// Each iteration represents 1 frame.

	/*ScePadVibrationParam*	m_oCurrent;		//Current motor speeds
	int32_t					m_handle;
	SceUserServiceUserId userId;
	int32_t type = SCE_PAD_PORT_TYPE_STANDARD;
	const ScePadOpenParam* pParam = NULL;
	ret = sceUserServiceGetInitialUser(&userId);
	m_handle = scePadOpen(userId, type, 0, pParam);
	m_oCurrent = (ScePadVibrationParam*)malloc(sizeof(ScePadVibrationParam));*/

	while ( true )
	{
		// Records the starting time of the current frame
		IntegrationDemo::Instance().StartFrame();

		// Process the current frame, quit if Update() is false.
		if ( ! IntegrationDemo::Instance().Update() )
		{
			break;
		}
		g_application.update();

		IntegrationDemo::Instance().Render();
		g_application.render();
			
		// Ends the current frame and regulates framerate.
		IntegrationDemo::Instance().EndFrame();
	}

	//AK::ATRAC9::Term();

	g_application.finalize();

	IntegrationDemo::Instance().Term();

	TermIO();

	return 0;
}
